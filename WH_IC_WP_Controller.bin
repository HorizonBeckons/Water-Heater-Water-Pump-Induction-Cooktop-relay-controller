esphome:
  name: kitchen-panel
  friendly_name: Kitchen Control Panel

esp8266:
  board: d1_mini

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "YOUR_ENCRYPTION_KEY_HERE"

ota:
  - platform: esphome
    password: "YOUR_OTA_PASSWORD_HERE"

wifi:
  ssid: "YOUR_WIFI_SSID"
  password: "YOUR_WIFI_PASSWORD"

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Kitchen-Panel Fallback Hotspot"
    password: "fallback123"

captive_portal:

# Status LED
status_led:
  pin:
    number: GPIO2
    inverted: true

# Global variables for state management
globals:
  - id: system_state
    type: int
    restore_value: true
    initial_value: '0'  # 0=OFF, 1=INDUCTION, 2=WATER_HEATER
  - id: water_heater_start_time
    type: unsigned long
    restore_value: false
    initial_value: '0'
  - id: water_pump_start_time
    type: unsigned long
    restore_value: false
    initial_value: '0'

# Binary sensors for buttons
binary_sensor:
  - platform: gpio
    pin:
      number: GPIO13  # D7
      mode:
        input: true
        pullup: true
      inverted: true
    name: "Control Button"
    id: button_1
    filters:
      - delayed_on: 50ms
      - delayed_off: 50ms
    on_press:
      - script.execute: handle_button_1_press

  - platform: gpio
    pin:
      number: GPIO16  # D0
      mode:
        input: true
        pullup: true
      inverted: true
    name: "Water Pump Button"
    id: button_2
    filters:
      - delayed_on: 50ms
      - delayed_off: 50ms
    on_press:
      - script.execute: toggle_water_pump

# Switches for relays
switch:
  - platform: gpio
    pin:
      number: GPIO5  # D1
      inverted: true  # Active LOW relay
    name: "Induction Cooktop"
    id: induction_relay
    restore_mode: ALWAYS_OFF

  - platform: gpio
    pin:
      number: GPIO4  # D2
      inverted: true  # Active LOW relay
    name: "Water Heater"
    id: water_heater_relay
    restore_mode: ALWAYS_OFF

  - platform: gpio
    pin:
      number: GPIO14  # D5
      inverted: true  # Active LOW relay
    name: "Water Pump"
    id: water_pump_relay
    restore_mode: ALWAYS_OFF

# Template switches for logical control
  - platform: template
    name: "System Control"
    id: system_control
    turn_on_action:
      - script.execute: handle_button_1_press
    turn_off_action:
      - script.execute: system_off

  - platform: template
    name: "Water Pump Control"
    id: pump_control
    lambda: |-
      return id(water_pump_relay).state;
    turn_on_action:
      - script.execute: water_pump_on
    turn_off_action:
      - script.execute: water_pump_off

# RGB LEDs
light:
  - platform: fastled_clockless
    chipset: WS2812B
    pin: GPIO12  # D6
    num_leds: 2
    rgb_order: GRB
    name: "Status LEDs"
    id: status_leds
    effects:
      - pulse:
          name: "Slow Pulse"
          transition_length: 2s
          update_interval: 2s
      - strobe:
          name: "Purple Orange Oscillate"
          colors:
            - state: true
              color:
                red: 128
                green: 0
                blue: 128
              duration: 1s
            - state: true
              color:
                red: 255
                green: 165
                blue: 0
              duration: 1s

# Sensors for timers
sensor:
  - platform: template
    name: "Water Heater Timer"
    id: water_heater_timer
    unit_of_measurement: "min"
    accuracy_decimals: 0
    update_interval: 10s
    lambda: |-
      if (id(water_heater_start_time) == 0) {
        return 0;
      }
      unsigned long elapsed = millis() - id(water_heater_start_time);
      unsigned long remaining = 2700000 - elapsed;  // 45 minutes in ms
      if (remaining <= 0) {
        return 0;
      }
      return remaining / 60000;  // Convert to minutes

  - platform: template
    name: "Water Pump Timer"
    id: water_pump_timer
    unit_of_measurement: "min"
    accuracy_decimals: 0
    update_interval: 10s
    lambda: |-
      if (id(water_pump_start_time) == 0) {
        return 0;
      }
      unsigned long elapsed = millis() - id(water_pump_start_time);
      unsigned long remaining = 3600000 - elapsed;  // 60 minutes in ms
      if (remaining <= 0) {
        return 0;
      }
      return remaining / 60000;  // Convert to minutes

# Text sensor for system state
text_sensor:
  - platform: template
    name: "System State"
    id: system_state_text
    update_interval: 1s
    lambda: |-
      switch (id(system_state)) {
        case 0: return {"Off"};
        case 1: return {"Induction Cooktop"};
        case 2: return {"Water Heater"};
        default: return {"Unknown"};
      }

# Scripts for control logic
script:
  - id: handle_button_1_press
    then:
      - lambda: |-
          int current_state = id(system_state);
          ESP_LOGD("kitchen", "Button 1 pressed, current state: %d", current_state);
          
          switch (current_state) {
            case 0:  // OFF -> INDUCTION ON
              id(induction_relay).turn_on();
              id(water_heater_relay).turn_off();
              id(system_state) = 1;
              break;
              
            case 1:  // INDUCTION ON -> WATER HEATER ON
              id(induction_relay).turn_off();
              id(water_heater_relay).turn_on();
              id(system_state) = 2;
              id(water_heater_start_time) = millis();
              break;
              
            case 2:  // WATER HEATER ON -> OFF
              id(water_heater_relay).turn_off();
              id(system_state) = 0;
              id(water_heater_start_time) = 0;
              break;
          }
      - script.execute: update_leds

  - id: system_off
    then:
      - switch.turn_off: induction_relay
      - switch.turn_off: water_heater_relay
      - lambda: |-
          id(system_state) = 0;
          id(water_heater_start_time) = 0;
      - script.execute: update_leds

  - id: toggle_water_pump
    then:
      - lambda: |-
          if (id(water_pump_relay).state) {
            // Turn off
            id(water_pump_relay).turn_off();
            id(water_pump_start_time) = 0;
          } else {
            // Turn on
            id(water_pump_relay).turn_on();
            id(water_pump_start_time) = millis();
          }
      - script.execute: update_leds

  - id: water_pump_on
    then:
      - switch.turn_on: water_pump_relay
      - lambda: |-
          id(water_pump_start_time) = millis();
      - script.execute: update_leds

  - id: water_pump_off
    then:
      - switch.turn_off: water_pump_relay
      - lambda: |-
          id(water_pump_start_time) = 0;
      - script.execute: update_leds

  - id: update_leds
    then:
      - lambda: |-
          auto call = id(status_leds).turn_on();
          
          // Pixel 1 - System State
          switch (id(system_state)) {
            case 0:  // OFF
              call.set_single_light_color_mode();
              call.set_rgb(0, 0, 0);  // Black/Off
              break;
              
            case 1:  // INDUCTION ON
              call.set_single_light_color_mode();
              call.set_rgb(1.0, 0, 0);  // Red
              break;
              
            case 2:  // WATER HEATER ON
              call.set_effect("Purple Orange Oscillate");
              break;
          }
          
          call.perform();
          
          // Handle Pixel 2 separately for water pump
          if (id(water_pump_relay).state) {
            // Water pump is on - blue/green pulse
            auto call2 = id(status_leds).turn_on();
            call2.set_effect("Slow Pulse");
            call2.set_rgb(0, 0.5, 1.0);  // Blue-green
            call2.perform();
          }

  - id: check_timers
    then:
      - lambda: |-
          unsigned long current_time = millis();
          
          // Check water heater timer (45 minutes)
          if (id(water_heater_start_time) > 0 && 
              (current_time - id(water_heater_start_time) >= 2700000)) {  // 45 min = 2,700,000 ms
            ESP_LOGD("kitchen", "Water heater timer expired");
            id(water_heater_relay).turn_off();
            id(system_state) = 0;
            id(water_heater_start_time) = 0;
            id(update_leds).execute();
          }
          
          // Check water pump timer (60 minutes)
          if (id(water_pump_start_time) > 0 && 
              (current_time - id(water_pump_start_time) >= 3600000)) {  // 60 min = 3,600,000 ms
            ESP_LOGD("kitchen", "Water pump timer expired");
            id(water_pump_relay).turn_off();
            id(water_pump_start_time) = 0;
            id(update_leds).execute();
          }

# Interval to check timers every 30 seconds
interval:
  - interval: 30s
    then:
      - script.execute: check_timers

# Update LEDs every 5 seconds
  - interval: 5s
    then:
      - script.execute: update_leds  Serial.println(WiFi.localIP());
  
  // Setup web server routes for Home Assistant
  setupWebServer();
  server.begin();
  
  Serial.println("System Ready!");
}

void loop() {
  // Handle web server requests
  server.handleClient();
  
  // Read and process buttons
  handleButtons();
  
  // Check timers
  checkTimers();
  
  // Update LED animations
  updateLEDs();
  
  // Small delay to prevent excessive CPU usage
  delay(10);
}

void handleButtons() {
  unsigned long currentTime = millis();
  
  // Button 1 - Main Control (Induction/Water Heater cycle)
  if (digitalRead(BUTTON_1) == LOW && !button1Pressed && 
      (currentTime - button1LastPress > debounceDelay)) {
    button1Pressed = true;
    button1LastPress = currentTime;
    handleButton1Press();
    Serial.println("Button 1 pressed - State changed");
  }
  if (digitalRead(BUTTON_1) == HIGH) {
    button1Pressed = false;
  }
  
  // Button 2 - Water Pump Toggle
  if (digitalRead(BUTTON_2) == LOW && !button2Pressed && 
      (currentTime - button2LastPress > debounceDelay)) {
    button2Pressed = true;
    button2LastPress = currentTime;
    toggleWaterPump();
    Serial.println("Button 2 pressed - Water pump toggled");
  }
  if (digitalRead(BUTTON_2) == HIGH) {
    button2Pressed = false;
  }
}

void handleButton1Press() {
  switch (currentState) {
    case STATE_OFF:
      // Turn on Induction Cooktop
      setInductionState(true);
      setWaterHeaterState(false);
      currentState = STATE_INDUCTION_ON;
      break;
      
    case STATE_INDUCTION_ON:
      // Turn off Induction, turn on Water Heater
      setInductionState(false);
      setWaterHeaterState(true);
      currentState = STATE_WATER_HEATER_ON;
      waterHeaterStartTime = millis(); // Start 45-minute timer
      break;
      
    case STATE_WATER_HEATER_ON:
      // Turn off Water Heater
      setWaterHeaterState(false);
      currentState = STATE_OFF;
      waterHeaterStartTime = 0;
      break;
  }
}

void toggleWaterPump() {
  waterPumpActive = !waterPumpActive;
  setWaterPumpState(waterPumpActive);
  
  if (waterPumpActive) {
    waterPumpStartTime = millis(); // Start 1-hour timer
  } else {
    waterPumpStartTime = 0;
  }
}

void setInductionState(bool state) {
  digitalWrite(RELAY_INDUCTION, !state); // Active LOW relay
  Serial.print("Induction Cooktop: ");
  Serial.println(state ? "ON" : "OFF");
}

void setWaterHeaterState(bool state) {
  digitalWrite(RELAY_WATER_HEATER, !state); // Active LOW relay
  Serial.print("Water Heater: ");
  Serial.println(state ? "ON" : "OFF");
}

void setWaterPumpState(bool state) {
  digitalWrite(RELAY_WATER_PUMP, !state); // Active LOW relay
  Serial.print("Water Pump: ");
  Serial.println(state ? "ON" : "OFF");
}

void checkTimers() {
  unsigned long currentTime = millis();
  
  // Check Water Heater 45-minute timer
  if (waterHeaterStartTime > 0 && 
      (currentTime - waterHeaterStartTime >= WATER_HEATER_DURATION)) {
    Serial.println("Water Heater timer expired - turning off");
    setWaterHeaterState(false);
    currentState = STATE_OFF;
    waterHeaterStartTime = 0;
  }
  
  // Check Water Pump 1-hour timer
  if (waterPumpStartTime > 0 && 
      (currentTime - waterPumpStartTime >= WATER_PUMP_DURATION)) {
    Serial.println("Water Pump timer expired - turning off");
    setWaterPumpState(false);
    waterPumpActive = false;
    waterPumpStartTime = 0;
  }
}

void updateLEDs() {
  unsigned long currentTime = millis();
  if (currentTime - lastLEDUpdate < LED_UPDATE_INTERVAL) {
    return;
  }
  lastLEDUpdate = currentTime;
  animationStep++;
  
  // Pixel 1 - System State Indicator
  switch (currentState) {
    case STATE_OFF:
      leds[0] = CRGB::Black; // Off
      break;
      
    case STATE_INDUCTION_ON:
      leds[0] = CRGB::Red; // Steady red
      break;
      
    case STATE_WATER_HEATER_ON:
      // Oscillating purple/orange
      if ((animationStep / 20) % 2 == 0) {
        leds[0] = CRGB::Purple;
      } else {
        leds[0] = CRGB::Orange;
      }
      break;
  }
  
  // Pixel 2 - Water Pump Indicator
  if (waterPumpActive) {
    // Blue/green slow pulse
    uint8_t pulse = beatsin8(30); // Slow pulse (30 BPM)
    leds[1] = blend(CRGB::Blue, CRGB::Green, pulse);
  } else {
    leds[1] = CRGB::Black; // Off when pump not active
  }
  
  FastLED.show();
}

void setupWebServer() {
  // Home Assistant compatible endpoints
  
  // Status endpoint
  server.on("/status", HTTP_GET, []() {
    String json = "{";
    json += "\"induction\":" + String(currentState == STATE_INDUCTION_ON ? "true" : "false") + ",";
    json += "\"water_heater\":" + String(currentState == STATE_WATER_HEATER_ON ? "true" : "false") + ",";
    json += "\"water_pump\":" + String(waterPumpActive ? "true" : "false") + ",";
    json += "\"state\":" + String(currentState);
    json += "}";
    server.send(200, "application/json", json);
  });
  
  // Control endpoints
  server.on("/induction/on", HTTP_POST, []() {
    setInductionState(true);
    setWaterHeaterState(false);
    currentState = STATE_INDUCTION_ON;
    server.send(200, "text/plain", "Induction ON");
  });
  
  server.on("/induction/off", HTTP_POST, []() {
    setInductionState(false);
    if (currentState == STATE_INDUCTION_ON) {
      currentState = STATE_OFF;
    }
    server.send(200, "text/plain", "Induction OFF");
  });
  
  server.on("/heater/on", HTTP_POST, []() {
    setWaterHeaterState(true);
    setInductionState(false);
    currentState = STATE_WATER_HEATER_ON;
    waterHeaterStartTime = millis();
    server.send(200, "text/plain", "Water Heater ON");
  });
  
  server.on("/heater/off", HTTP_POST, []() {
    setWaterHeaterState(false);
    if (currentState == STATE_WATER_HEATER_ON) {
      currentState = STATE_OFF;
    }
    waterHeaterStartTime = 0;
    server.send(200, "text/plain", "Water Heater OFF");
  });
  
  server.on("/pump/on", HTTP_POST, []() {
    setWaterPumpState(true);
    waterPumpActive = true;
    waterPumpStartTime = millis();
    server.send(200, "text/plain", "Water Pump ON");
  });
  
  server.on("/pump/off", HTTP_POST, []() {
    setWaterPumpState(false);
    waterPumpActive = false;
    waterPumpStartTime = 0;
    server.send(200, "text/plain", "Water Pump OFF");
  });
  
  // Root endpoint
  server.on("/", HTTP_GET, []() {
    server.send(200, "text/plain", "Kitchen Control System Online");
  });
}
